#textdomain wesnoth-Rise_of_the_Elementalist

#define TIERED_MESSAGE FILTER1 FILTER2 FILTER3 MESSAGE
    [if]
        [have_unit]
            {FILTER1}
        [/have_unit]
        [then]
            [message]
                {FILTER1}
                message={MESSAGE}
            [/message]
        [/then]
        [else]
            [if]
                [have_unit]
                    {FILTER2}
                [/have_unit]
                [then]
                    [message]
                      {FILTER2}
                      message={MESSAGE}
                    [/message]
                [/then]
                [else]
                    [message]
                      {FILTER3}
                      message={MESSAGE}
                    [/message]
                [/else]
            [/if]
        [/else]
    [/if]
#enddef

#define TRANSFORM_HEAL FILTER TYPE
    {TRANSFORM_UNIT {FILTER} {TYPE}}
    {FULL_HEAL {FILTER}}
#enddef

#define ENEMIES_DEFEATED_EVENT_MACRO
    [event]
        name=enemies defeated
        [endlevel]
            result=victory
            {NEW_GOLD_CARRYOVER 40}
        [/endlevel]
    [/event]
#enddef

#define REDRAW_MACRO
    [redraw]
        side=1
    [/redraw]
#enddef

#define FILTER_LOYALS
    [filter_wml]
        upkeep="loyal"
    [/filter_wml]
#enddef

#define RECALL_LOYALS
    [store_unit]
        variable=loyals
        [filter]
            {FILTER_LOYALS}
            [not]
                canrecruit=yes
            [/not]
            x,y=recall,recall
        [/filter]
    [/store_unit]

    {FOREACH loyals loyal_one}
        [recall]
            id=$loyals[$loyal_one].id
            find_vacant=yes
        [/recall]
    {NEXT loyal_one}
    {CLEAR_VARIABLE loyals}
#enddef

#define WEAPON_SPECIAL_ESSENCE_DEVOUR
    [devour]
        id=devour
        name= _ "devour"
        description= _ "Devour:
When a unit is killed by a devouring attack of a magical essence, the energy of the killed unit is converted to wisp. This affects all units, including Undead and units in villages."
    [/devour]
#enddef

#define RAISE_ALL_DEAD_EVENT_MACRO RAISE_SIDE TYPE FIRST_TIME_WML
    [event]
        name=prestart
        {VARIABLE show_raise_dead_message yes}
    [/event]
    [event]
        name=victory
        {CLEAR_VARIABLE show_raise_dead_message}
    [/event]
    [event]
        name=die
        first_time_only=no
        [filter]
            [filter_wml]
                [not]
                    [status]
                        not_living=yes
                    [/status]
                [/not]
            [/filter_wml]
        [/filter]
        [filter_second_attack]
            [not]
                special=plague
            [/not]
        [/filter_second_attack]

        [if]
            [have_unit]
                side={RAISE_SIDE}
                canrecruit=yes
            [/have_unit]
            [then]
                [fire_event]
                    name=before raise unit
                    [primary_unit]
                        id=$unit.id
                    [/primary_unit]
                    [secondary_unit]
                        id=$second_unit.id
                    [/secondary_unit]
                [/fire_event]

                [store_unit]
                    variable=dead_store
                    kill=yes
                    [filter]
                        x=$x1
                        y=$y1
                    [/filter]
                [/store_unit]

                {GENERIC_UNIT {RAISE_SIDE} {TYPE} $x1 $y1}
                [+unit]
                    moves=0
                    attacks_left=0
                    upkeep=loyal
                    variation=$dead_store.undead_variation
                [/unit]

                {CLEAR_VARIABLE dead_store}

                [if]
                    [variable]
                        name=show_raise_dead_message
                        equals=yes
                    [/variable]
                    [then]
                        {VARIABLE show_raise_dead_message no}
                        {FIRST_TIME_WML}
                    [/then]
                [/if]
            [/then]
        [/if]
    [/event]
#enddef
